{"ast":null,"code":"import _classCallCheck from \"/home/kevin/Desktop/Eva/Tutorial/redux-tutorial/reddit-redux-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/kevin/Desktop/Eva/Tutorial/redux-tutorial/reddit-redux-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/kevin/Desktop/Eva/Tutorial/redux-tutorial/reddit-redux-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/kevin/Desktop/Eva/Tutorial/redux-tutorial/reddit-redux-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/kevin/Desktop/Eva/Tutorial/redux-tutorial/reddit-redux-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/kevin/Desktop/Eva/Tutorial/redux-tutorial/reddit-redux-tutorial/src/containers/AsyncApp.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { selectSubreddit, fetchPostsIfNeeded, invalidateSubreddit } from '../actions';\nimport Picker from '../components/Picker';\nimport Posts from '../components/Posts';\n\nvar AsyncApp = /*#__PURE__*/function (_Component) {\n  _inherits(AsyncApp, _Component);\n\n  var _super = _createSuper(AsyncApp);\n\n  function AsyncApp(props) {\n    var _this;\n\n    _classCallCheck(this, AsyncApp);\n\n    _this = _super.call(this, props);\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));\n    _this.handleRefreshClick = _this.handleRefreshClick.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(AsyncApp, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          dispatch = _this$props.dispatch,\n          selectedSubreddit = _this$props.selectedSubreddit;\n      dispatch(fetchPostsIfNeeded(selectedSubreddit));\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.selectedSubreddit !== prevProps.selectedSubreddit) {\n        var _this$props2 = this.props,\n            dispatch = _this$props2.dispatch,\n            selectedSubreddit = _this$props2.selectedSubreddit;\n        dispatch(fetchPostsIfNeeded(selectedSubreddit));\n      }\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(nextSubreddit) {\n      this.props.dispatch(selectSubreddit(nextSubreddit));\n      this.props.dispatch(fetchPostsIfNeeded(nextSubreddit));\n    }\n  }, {\n    key: \"handleRefreshClick\",\n    value: function handleRefreshClick(e) {\n      e.preventDefault();\n      var _this$props3 = this.props,\n          dispatch = _this$props3.dispatch,\n          selectedSubreddit = _this$props3.selectedSubreddit;\n      dispatch(invalidateSubreddit(selectedSubreddit));\n      dispatch(fetchPostsIfNeeded(selectedSubreddit));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n          selectedSubreddit = _this$props4.selectedSubreddit,\n          posts = _this$props4.posts,\n          isFetching = _this$props4.isFetching,\n          lastUpdated = _this$props4.lastUpdated;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Picker, {\n        value: selectedSubreddit,\n        onChange: this.handleChange,\n        options: ['reactjs', 'frontend'],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 9\n        }\n      }, lastUpdated && /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }\n      }, \"Last updated at \", new Date(lastUpdated).toLocaleTimeString(), \".\", ' '), !isFetching && /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.handleRefreshClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }\n      }, \"Refresh\")), isFetching && posts.length === 0 && /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 46\n        }\n      }, \"Loading...\"), !isFetching && posts.length === 0 && /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 47\n        }\n      }, \"Empty.\"), posts.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          opacity: isFetching ? 0.5 : 1\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Posts, {\n        posts: posts,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }\n      })));\n    }\n  }]);\n\n  return AsyncApp;\n}(Component);\n\nAsyncApp.propTypes = {\n  selectedSubreddit: PropTypes.string.isRequired,\n  posts: PropTypes.array.isRequired,\n  isFetching: PropTypes.bool.isRequired,\n  lastUpdated: PropTypes.number,\n  dispatch: PropTypes.func.isRequired\n};\n\nfunction mapStateToProps(state) {\n  var selectedSubreddit = state.selectedSubreddit,\n      postsBySubreddit = state.postsBySubreddit;\n\n  var _ref = postsBySubreddit[selectedSubreddit] || {\n    isFetching: true,\n    items: []\n  },\n      isFetching = _ref.isFetching,\n      lastUpdated = _ref.lastUpdated,\n      posts = _ref.items;\n\n  return {\n    selectedSubreddit: selectedSubreddit,\n    posts: posts,\n    isFetching: isFetching,\n    lastUpdated: lastUpdated\n  };\n}\n\nexport default connect(mapStateToProps)(AsyncApp);","map":{"version":3,"sources":["/home/kevin/Desktop/Eva/Tutorial/redux-tutorial/reddit-redux-tutorial/src/containers/AsyncApp.js"],"names":["React","Component","PropTypes","connect","selectSubreddit","fetchPostsIfNeeded","invalidateSubreddit","Picker","Posts","AsyncApp","props","handleChange","bind","handleRefreshClick","dispatch","selectedSubreddit","prevProps","nextSubreddit","e","preventDefault","posts","isFetching","lastUpdated","Date","toLocaleTimeString","length","opacity","propTypes","string","isRequired","array","bool","number","func","mapStateToProps","state","postsBySubreddit","items"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport {\n  selectSubreddit,\n  fetchPostsIfNeeded,\n  invalidateSubreddit\n} from '../actions'\nimport Picker from '../components/Picker'\nimport Posts from '../components/Posts'\n\nclass AsyncApp extends Component {\n  constructor(props) {\n    super(props)\n    this.handleChange = this.handleChange.bind(this)\n    this.handleRefreshClick = this.handleRefreshClick.bind(this)\n  }\n\n  componentDidMount() {\n    const { dispatch, selectedSubreddit } = this.props\n    dispatch(fetchPostsIfNeeded(selectedSubreddit))\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.selectedSubreddit !== prevProps.selectedSubreddit) {\n      const { dispatch, selectedSubreddit } = this.props\n      dispatch(fetchPostsIfNeeded(selectedSubreddit))\n    }\n  }\n\n  handleChange(nextSubreddit) {\n    this.props.dispatch(selectSubreddit(nextSubreddit))\n    this.props.dispatch(fetchPostsIfNeeded(nextSubreddit))\n  }\n\n  handleRefreshClick(e) {\n    e.preventDefault()\n\n    const { dispatch, selectedSubreddit } = this.props\n    dispatch(invalidateSubreddit(selectedSubreddit))\n    dispatch(fetchPostsIfNeeded(selectedSubreddit))\n  }\n\n  render() {\n    const { selectedSubreddit, posts, isFetching, lastUpdated } = this.props\n    return (\n      <div>\n        <Picker\n          value={selectedSubreddit}\n          onChange={this.handleChange}\n          options={['reactjs', 'frontend']}\n        />\n        <p>\n          {lastUpdated && (\n            <span>\n              Last updated at {new Date(lastUpdated).toLocaleTimeString()}.{' '}\n            </span>\n          )}\n          {!isFetching && (\n            <button onClick={this.handleRefreshClick}>Refresh</button>\n          )}\n        </p>\n        {isFetching && posts.length === 0 && <h2>Loading...</h2>}\n        {!isFetching && posts.length === 0 && <h2>Empty.</h2>}\n        {posts.length > 0 && (\n          <div style={{ opacity: isFetching ? 0.5 : 1 }}>\n            <Posts posts={posts} />\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\nAsyncApp.propTypes = {\n  selectedSubreddit: PropTypes.string.isRequired,\n  posts: PropTypes.array.isRequired,\n  isFetching: PropTypes.bool.isRequired,\n  lastUpdated: PropTypes.number,\n  dispatch: PropTypes.func.isRequired\n}\n\nfunction mapStateToProps(state) {\n  const { selectedSubreddit, postsBySubreddit } = state\n  const { isFetching, lastUpdated, items: posts } = postsBySubreddit[\n    selectedSubreddit\n  ] || {\n    isFetching: true,\n    items: []\n  }\n\n  return {\n    selectedSubreddit,\n    posts,\n    isFetching,\n    lastUpdated\n  }\n}\n\nexport default connect(mapStateToProps)(AsyncApp)\n"]},"metadata":{},"sourceType":"module"}