{"ast":null,"code":"import _defineProperty from \"/home/kevin/Desktop/Eva/Tutorial/redux-tutorial/reddit-redux-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { combineReducers } from 'redux';\nimport { SELECT_SUBREDDIT, INVALIDATE_SUBREDDIT, REQUEST_POSTS, RECEIVE_POSTS } from './actions';\n\nfunction selectedSubreddit() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'reactjs';\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SELECT_SUBREDDIT:\n      return action.subreddit;\n\n    default:\n      return state;\n  }\n}\n\nfunction posts() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    isFetching: false,\n    didInvalidate: false,\n    items: []\n  };\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case INVALIDATE_SUBREDDIT:\n      return Object.assign({}, state, {\n        didInvalidate: true\n      });\n\n    case REQUEST_POSTS:\n      return Object.assign({}, state, {\n        isFetching: true,\n        didInvalidate: false\n      });\n\n    case RECEIVE_POSTS:\n      return Object.assign({}, state, {\n        isFetching: false,\n        didInvalidate: false,\n        items: action.posts,\n        lastUpdated: action.receivedAt\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction postsBySubreddit() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case INVALIDATE_SUBREDDIT:\n    case RECEIVE_POSTS:\n    case REQUEST_POSTS:\n      return Object.assign({}, state, _defineProperty({}, action.subreddit, posts(state[action.subreddit], action)));\n\n    default:\n      return state;\n  }\n}\n\nvar rootReducer = combineReducers({\n  postsBySubreddit: postsBySubreddit,\n  selectedSubreddit: selectedSubreddit\n});\nexport default rootReducer;","map":{"version":3,"sources":["/home/kevin/Desktop/Eva/Tutorial/redux-tutorial/reddit-redux-tutorial/src/reducers.js"],"names":["combineReducers","SELECT_SUBREDDIT","INVALIDATE_SUBREDDIT","REQUEST_POSTS","RECEIVE_POSTS","selectedSubreddit","state","action","type","subreddit","posts","isFetching","didInvalidate","items","Object","assign","lastUpdated","receivedAt","postsBySubreddit","rootReducer"],"mappings":";AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,SACEC,gBADF,EAEEC,oBAFF,EAGEC,aAHF,EAIEC,aAJF,QAKO,WALP;;AAOA,SAASC,iBAAT,GAAsD;AAAA,MAA3BC,KAA2B,uEAAnB,SAAmB;AAAA,MAARC,MAAQ;;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKP,gBAAL;AACE,aAAOM,MAAM,CAACE,SAAd;;AACF;AACE,aAAOH,KAAP;AAJJ;AAMD;;AAED,SAASI,KAAT,GAOE;AAAA,MANAJ,KAMA,uEANQ;AACNK,IAAAA,UAAU,EAAE,KADN;AAENC,IAAAA,aAAa,EAAE,KAFT;AAGNC,IAAAA,KAAK,EAAE;AAHD,GAMR;AAAA,MADAN,MACA;;AACA,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,oBAAL;AACE,aAAOY,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBT,KAAlB,EAAyB;AAC9BM,QAAAA,aAAa,EAAE;AADe,OAAzB,CAAP;;AAGF,SAAKT,aAAL;AACE,aAAOW,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBT,KAAlB,EAAyB;AAC9BK,QAAAA,UAAU,EAAE,IADkB;AAE9BC,QAAAA,aAAa,EAAE;AAFe,OAAzB,CAAP;;AAIF,SAAKR,aAAL;AACE,aAAOU,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBT,KAAlB,EAAyB;AAC9BK,QAAAA,UAAU,EAAE,KADkB;AAE9BC,QAAAA,aAAa,EAAE,KAFe;AAG9BC,QAAAA,KAAK,EAAEN,MAAM,CAACG,KAHgB;AAI9BM,QAAAA,WAAW,EAAET,MAAM,CAACU;AAJU,OAAzB,CAAP;;AAMF;AACE,aAAOX,KAAP;AAlBJ;AAoBD;;AAED,SAASY,gBAAT,GAA8C;AAAA,MAApBZ,KAAoB,uEAAZ,EAAY;AAAA,MAARC,MAAQ;;AAC5C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,oBAAL;AACA,SAAKE,aAAL;AACA,SAAKD,aAAL;AACE,aAAOW,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBT,KAAlB,sBACJC,MAAM,CAACE,SADH,EACeC,KAAK,CAACJ,KAAK,CAACC,MAAM,CAACE,SAAR,CAAN,EAA0BF,MAA1B,CADpB,EAAP;;AAGF;AACE,aAAOD,KAAP;AARJ;AAUD;;AAED,IAAMa,WAAW,GAAGnB,eAAe,CAAC;AAClCkB,EAAAA,gBAAgB,EAAhBA,gBADkC;AAElCb,EAAAA,iBAAiB,EAAjBA;AAFkC,CAAD,CAAnC;AAKA,eAAec,WAAf","sourcesContent":["import { combineReducers } from 'redux'\nimport {\n  SELECT_SUBREDDIT,\n  INVALIDATE_SUBREDDIT,\n  REQUEST_POSTS,\n  RECEIVE_POSTS\n} from './actions'\n\nfunction selectedSubreddit(state = 'reactjs', action) {\n  switch (action.type) {\n    case SELECT_SUBREDDIT:\n      return action.subreddit\n    default:\n      return state\n  }\n}\n\nfunction posts(\n  state = {\n    isFetching: false,\n    didInvalidate: false,\n    items: []\n  },\n  action\n) {\n  switch (action.type) {\n    case INVALIDATE_SUBREDDIT:\n      return Object.assign({}, state, {\n        didInvalidate: true\n      })\n    case REQUEST_POSTS:\n      return Object.assign({}, state, {\n        isFetching: true,\n        didInvalidate: false\n      })\n    case RECEIVE_POSTS:\n      return Object.assign({}, state, {\n        isFetching: false,\n        didInvalidate: false,\n        items: action.posts,\n        lastUpdated: action.receivedAt\n      })\n    default:\n      return state\n  }\n}\n\nfunction postsBySubreddit(state = {}, action) {\n  switch (action.type) {\n    case INVALIDATE_SUBREDDIT:\n    case RECEIVE_POSTS:\n    case REQUEST_POSTS:\n      return Object.assign({}, state, {\n        [action.subreddit]: posts(state[action.subreddit], action)\n      })\n    default:\n      return state\n  }\n}\n\nconst rootReducer = combineReducers({\n  postsBySubreddit,\n  selectedSubreddit\n})\n\nexport default rootReducer\n"]},"metadata":{},"sourceType":"module"}