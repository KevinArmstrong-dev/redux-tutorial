{"ast":null,"code":"import fetch from 'cross-fetch';\nexport var REQUEST_POSTS = 'REQUEST_POSTS';\nexport var RECEIVE_POSTS = 'RECEIVE_POSTS';\nexport var SELECT_SUBREDDIT = 'SELECT_SUBREDDIT';\nexport var INVALIDATE_SUBREDDIT = 'INVALIDATE_SUBREDDIT';\nexport function selectSubreddit(subreddit) {\n  return {\n    type: SELECT_SUBREDDIT,\n    subreddit: subreddit\n  };\n}\nexport function invalidateSubreddit(subreddit) {\n  return {\n    type: INVALIDATE_SUBREDDIT,\n    subreddit: subreddit\n  };\n}\n\nfunction requestPosts(subreddit) {\n  return {\n    type: REQUEST_POSTS,\n    subreddit: subreddit\n  };\n}\n\nfunction receivePosts(subreddit, json) {\n  return {\n    type: RECEIVE_POSTS,\n    subreddit: subreddit,\n    posts: json.data.children.map(function (child) {\n      return child.data;\n    }),\n    receivedAt: Date.now()\n  };\n}\n\nfunction fetchPosts(subreddit) {\n  return function (dispatch) {\n    dispatch(requestPosts(subreddit));\n    return fetch(\"https://www.reddit.com/r/\".concat(subreddit, \".json\")).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      return dispatch(receivePosts(subreddit, json));\n    });\n  };\n}\n\nfunction shouldFetchPosts(state, subreddit) {\n  var posts = state.postsBySubreddit[subreddit];\n\n  if (!posts) {\n    return true;\n  } else if (posts.isFetching) {\n    return false;\n  } else {\n    return posts.didInvalidate;\n  }\n}\n\nexport function fetchPostsIfNeeded(subreddit) {\n  return function (dispatch, getState) {\n    if (shouldFetchPosts(getState(), subreddit)) {\n      return dispatch(fetchPosts(subreddit));\n    }\n  };\n}","map":{"version":3,"sources":["/home/kevin/Desktop/Eva/Tutorial/redux-tutorial/reddit-redux-tutorial/src/actions.js"],"names":["fetch","REQUEST_POSTS","RECEIVE_POSTS","SELECT_SUBREDDIT","INVALIDATE_SUBREDDIT","selectSubreddit","subreddit","type","invalidateSubreddit","requestPosts","receivePosts","json","posts","data","children","map","child","receivedAt","Date","now","fetchPosts","dispatch","then","response","shouldFetchPosts","state","postsBySubreddit","isFetching","didInvalidate","fetchPostsIfNeeded","getState"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,aAAlB;AAEA,OAAO,IAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,IAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,oBAAoB,GAAG,sBAA7B;AAEP,OAAO,SAASC,eAAT,CAAyBC,SAAzB,EAAoC;AACzC,SAAO;AACLC,IAAAA,IAAI,EAAEJ,gBADD;AAELG,IAAAA,SAAS,EAATA;AAFK,GAAP;AAID;AAED,OAAO,SAASE,mBAAT,CAA6BF,SAA7B,EAAwC;AAC7C,SAAO;AACLC,IAAAA,IAAI,EAAEH,oBADD;AAELE,IAAAA,SAAS,EAATA;AAFK,GAAP;AAID;;AAED,SAASG,YAAT,CAAsBH,SAAtB,EAAiC;AAC/B,SAAO;AACLC,IAAAA,IAAI,EAAEN,aADD;AAELK,IAAAA,SAAS,EAATA;AAFK,GAAP;AAID;;AAED,SAASI,YAAT,CAAsBJ,SAAtB,EAAiCK,IAAjC,EAAuC;AACrC,SAAO;AACLJ,IAAAA,IAAI,EAAEL,aADD;AAELI,IAAAA,SAAS,EAATA,SAFK;AAGLM,IAAAA,KAAK,EAAED,IAAI,CAACE,IAAL,CAAUC,QAAV,CAAmBC,GAAnB,CAAuB,UAAAC,KAAK;AAAA,aAAIA,KAAK,CAACH,IAAV;AAAA,KAA5B,CAHF;AAILI,IAAAA,UAAU,EAAEC,IAAI,CAACC,GAAL;AAJP,GAAP;AAMD;;AAED,SAASC,UAAT,CAAoBd,SAApB,EAA+B;AAC7B,SAAO,UAAAe,QAAQ,EAAI;AACjBA,IAAAA,QAAQ,CAACZ,YAAY,CAACH,SAAD,CAAb,CAAR;AACA,WAAON,KAAK,oCAA6BM,SAA7B,WAAL,CACJgB,IADI,CACC,UAAAC,QAAQ;AAAA,aAAIA,QAAQ,CAACZ,IAAT,EAAJ;AAAA,KADT,EAEJW,IAFI,CAEC,UAAAX,IAAI;AAAA,aAAIU,QAAQ,CAACX,YAAY,CAACJ,SAAD,EAAYK,IAAZ,CAAb,CAAZ;AAAA,KAFL,CAAP;AAGD,GALD;AAMD;;AAED,SAASa,gBAAT,CAA0BC,KAA1B,EAAiCnB,SAAjC,EAA4C;AAC1C,MAAMM,KAAK,GAAGa,KAAK,CAACC,gBAAN,CAAuBpB,SAAvB,CAAd;;AACA,MAAI,CAACM,KAAL,EAAY;AACV,WAAO,IAAP;AACD,GAFD,MAEO,IAAIA,KAAK,CAACe,UAAV,EAAsB;AAC3B,WAAO,KAAP;AACD,GAFM,MAEA;AACL,WAAOf,KAAK,CAACgB,aAAb;AACD;AACF;;AAED,OAAO,SAASC,kBAAT,CAA4BvB,SAA5B,EAAuC;AAC5C,SAAO,UAACe,QAAD,EAAWS,QAAX,EAAwB;AAC7B,QAAIN,gBAAgB,CAACM,QAAQ,EAAT,EAAaxB,SAAb,CAApB,EAA6C;AAC3C,aAAOe,QAAQ,CAACD,UAAU,CAACd,SAAD,CAAX,CAAf;AACD;AACF,GAJD;AAKD","sourcesContent":["import fetch from 'cross-fetch'\n\nexport const REQUEST_POSTS = 'REQUEST_POSTS'\nexport const RECEIVE_POSTS = 'RECEIVE_POSTS'\nexport const SELECT_SUBREDDIT = 'SELECT_SUBREDDIT'\nexport const INVALIDATE_SUBREDDIT = 'INVALIDATE_SUBREDDIT'\n\nexport function selectSubreddit(subreddit) {\n  return {\n    type: SELECT_SUBREDDIT,\n    subreddit\n  }\n}\n\nexport function invalidateSubreddit(subreddit) {\n  return {\n    type: INVALIDATE_SUBREDDIT,\n    subreddit\n  }\n}\n\nfunction requestPosts(subreddit) {\n  return {\n    type: REQUEST_POSTS,\n    subreddit\n  }\n}\n\nfunction receivePosts(subreddit, json) {\n  return {\n    type: RECEIVE_POSTS,\n    subreddit,\n    posts: json.data.children.map(child => child.data),\n    receivedAt: Date.now()\n  }\n}\n\nfunction fetchPosts(subreddit) {\n  return dispatch => {\n    dispatch(requestPosts(subreddit))\n    return fetch(`https://www.reddit.com/r/${subreddit}.json`)\n      .then(response => response.json())\n      .then(json => dispatch(receivePosts(subreddit, json)))\n  }\n}\n\nfunction shouldFetchPosts(state, subreddit) {\n  const posts = state.postsBySubreddit[subreddit]\n  if (!posts) {\n    return true\n  } else if (posts.isFetching) {\n    return false\n  } else {\n    return posts.didInvalidate\n  }\n}\n\nexport function fetchPostsIfNeeded(subreddit) {\n  return (dispatch, getState) => {\n    if (shouldFetchPosts(getState(), subreddit)) {\n      return dispatch(fetchPosts(subreddit))\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}